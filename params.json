{
  "name": "nLogger",
  "tagline": "A module for logging functionality",
  "body": "# nCore.nLogger\r\n[![Build Status](https://travis-ci.org/nodes-frontend/nLogger.svg?branch=master)](https://travis-ci.org/nodes-frontend/nLogger)\r\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\r\n[![Coverage Status](https://coveralls.io/repos/github/nodes-frontend/nLogger/badge.svg?branch=master)](https://coveralls.io/github/nodes-frontend/nLogger?branch=master)\r\n[![devDependency Status](https://david-dm.org/nodes-frontend/nLogger/dev-status.svg)](https://david-dm.org/nodes-frontend/nLogger#info=devDependencies)\r\n[![Dependency Status](https://david-dm.org/nodes-frontend/nLogger.svg)](https://david-dm.org/nodes-frontend/nLogger)\r\n\r\nA module for logging functionality. This is not for production.\r\nPlease note that we do not disable console methods outside of our angular application scope.\r\n\r\nWhen the global DEBUG_ENV variable is set to false we disable all console methods based on your config.\r\n\r\n## Configuration\r\n\r\nUse the provider to overwrite defaults.\r\n\r\n```javascript\r\nvar myConfig = nLoggerConfigProvider.configure();\r\nnLoggerConfigProvider.configure(myConfig);\r\n```\r\n\r\nThe .configure() method acts as a getter if no arguments is provided and a setter otherwise.\r\n\r\nDefault settings:\r\n \r\n```javascript\r\nnLoggerConfigProvider.configure({\r\n\tblacklist: ['log', 'warn', 'info', 'error'], //These methods are disabled in prod env\r\n\tconsole: {\r\n\t\tenable: true //Disable the logger console prints\r\n\t},\r\n\tmessages: {\r\n\t\tenable: true, //Disable the logger message prints\r\n\t\tdismissOnTimeout: false,\r\n\t\ttimeout: 4000,\r\n\t\tdismissButton: false,\r\n\t\tdismissButtonHtml: '&times;',\r\n\t\tdismissOnClick: true\r\n\t}\r\n});\r\n``` \r\n\r\n## Usage\r\n\r\nAll logging methods takes 3 arguments:\r\n\r\n```javascript\r\nnLogger.method(message, data, methodSpecificOptions);\r\n```\r\n\r\nMessage and data can be of any type, methodSpecificOptions can overwrite the defaults and must be an object.\r\n\r\n```javascript\r\nangular.module('demoApp', ['nCore'])\r\n\t.run(function(nLogger) {\r\n\r\n\t\tnLogger.log('nLogger.log', {data: 'foo'}, {dismissButton: false});\r\n\r\n\t\tnLogger.error('nLogger.error', new Error('Error'));\r\n\r\n\t\tnLogger.warning('nLogger.warning', {o: '1'});\r\n\r\n\t\tnLogger.success('nLogger.success', [0,1,2,3,{a: 1}]);\r\n\r\n\t\tnLogger.info('nLogger.info', window.console);\r\n\t\t\r\n\t});\r\n```\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}